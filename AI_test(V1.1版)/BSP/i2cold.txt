#if I2C_METHOD==POLLING
void _I2C1_EV_IRQHandler(void)
{
  static u8 i;
   EV_Word=I2C_GetLastEvent(I2C1);
   
   
    switch (EV_Word)
    {

        /* Slave Transmitter Events */
	
	case 0x00060482:					 //TRA,BUSY,  AF ,TXE,ADDR
    case I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED:  /* EV1 */
        //I2C_ClearITPendingBit (I2C1, I2C_IT_ADDR); 
		if(slave_write())
		{
		 
		 I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_BUF|I2C_IT_ERR, ENABLE)
		}
		else
		I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_BUF|I2C_IT_ERR, ENABLE);
		break;
	
        /* Slave Receiver Events */
	//case 0x00020402:
    case I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED:         /* EV1 */
        slave_read();
		I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_BUF|I2C_IT_ERR, ENABLE);
        break;

	default:
             EV[i++&0x0ff]=EV_Word;
//	    	  I2C_DeInit(I2C1);
//   	I2C_Init(I2C1,&I2C_InitStruct);
//	I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_BUF|I2C_IT_ERR, ENABLE);
//	 I2C_Cmd(I2C1, ENABLE);
		
	    break;
    }
}

bool slave_write(void)
{
	uint16_t torlerance;
	u8 i;
		    I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_BUF|I2C_IT_ERR, DISABLE);
			I2C_AcknowledgeConfig(I2C1, ENABLE);
		    Deal_Readed();
			I2C_SendData(I2C1, TxBuffer[0]);
			 for(i=1;i<8;i++)
			{
				torlerance=I2C_PollingWait;    
				while(!I2C_CheckEvent(I2C1, I2C_EVENT_SLAVE_BYTE_TRANSMITTING ))
				{
					 if (torlerance-- == 0)
			     return 0;	
				}
				I2C_SendData(I2C1, TxBuffer[i]);
			}
			
			torlerance=I2C_PollingWait;
			while(!I2C_CheckEvent(I2C1, I2C_EVENT_SLAVE_ACK_FAILURE))
			{
				 if (torlerance-- == 0)
		     return 0;	
			}
			I2C_ClearITPendingBit (I2C1, I2C_IT_AF); 
			return 1;
}

bool slave_read(void)
{
	uint16_t torlerance;
	u8 i;
	I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_BUF|I2C_IT_ERR, DISABLE);
	I2C_AcknowledgeConfig(I2C1, ENABLE);
	
	   	for(i=0;i<8;i++)
		{	
			torlerance=I2C_PollingWait;
			while(!I2C_CheckEvent(I2C1, I2C_EVENT_SLAVE_BYTE_RECEIVED))
			{
				 if (torlerance-- == 0)
		     return 0;	
			}
		RxBuffer[i] = I2C_ReceiveData(I2C1);
		}
        SlaveReceptionComplete = 0x01;
	torlerance=I2C_PollingWait;
	   	while(!I2C_CheckEvent(I2C1, I2C_EVENT_SLAVE_STOP_DETECTED))
		{
		 if (torlerance-- == 0)
		 return 0;	
		}        /* EV4 */
        /* Clear I2C1 STOPF flag: read of I2C_SR1 followed by a write in I2C_CR1 */
        (void)(I2C_GetITStatus(I2C1, I2C_IT_STOPF));
		I2C_Cmd(I2C1, ENABLE);
	return 1;

}
#endif